<?xml version="1.0" encoding="UTF-8" ?>

<!--   Sage and Linear Algebra Worksheets    -->
<!--            Robert A. Beezer             -->
<!--  Copyright 2017-2019 License: CC BY-SA  -->
<!--  See COPYING for more information       -->

<mathbook  xmlns:xi="http://www.w3.org/2001/XInclude">

    <xi:include href="../worksheetinfo.xml" />

    <article xml:id="IVLT">
        <title>Sage and Linear Algebra Worksheet</title>
        <subtitle>FCLA Section IVLT</subtitle>

        <!-- header inclusion needs -xinclude switch on xsltproc -->
        <frontmatter>
            <xi:include href="../header.xml" />
        </frontmatter>

        <section>
            <title>Invertible Linear Transformations</title>

            <p>A carefully-crafted invertible linear transformation from <m>\mathbb{Q}^5</m> to <m>\mathbb{Q}^5</m>.</p>

            <sage><input>
            A = matrix(QQ, [[1, 1, -1, -2, 0], [-3, -2, 1, 4, 7],
                [2, 2, -1, -3, -4], [-4, -3, 3, 8, 3], [5, 6, -7, -8, 8]])
            T = linear_transformation(QQ^5, QQ^5, A, side='right')
            T
            </input></sage>

            <sage><input>
            T.is_injective(), T.is_surjective()
            </input></sage>

            <sage><input>
            T.is_invertible()
            </input></sage>

            <sage><input>
            S = T.inverse()
            S
            </input></sage>

            <p>The <c>*</c> operator, like we would use for multiplication, will create a composition.  This will be perfectly natural once we discuss Section MR.  Here, composing an invertible linear transformation with its inverse will yield an identity linear transformation.</p>

            <sage><input>
            comp = S*T
            comp
            </input></sage>

            <sage><input>
            comp.is_identity()
            </input></sage>
        </section>

        <section>
        <title>Defining an Invertible Linear Transformation on Bases</title>

            <p>Now, an invertible linear transformation defined on a basis, and the resulting inverse linear transformation.  We get two <q>random</q> bases of <m>\mathbb{Q}^7</m> from nonsingular (determinant one) matrices.</p>

            <sage><input>
            C = random_matrix(QQ, 7, 7, algorithm='unimodular', upper_bound=99)
            Cbasis = C.columns()
            D = random_matrix(QQ, 7, 7, algorithm='unimodular', upper_bound=99)
            Dbasis = D.columns()
            </input></sage>

            <p>Vector spaces with defined user bases.</p>

            <sage><input>
            Cspace = (QQ^7).subspace_with_basis(Cbasis)
            Dspace = (QQ^7).subspace_with_basis(Dbasis)
            Cspace, Dspace
            </input></sage>

            <p>The invertible linear transformation defined with images as the vectors in the codomain basis <c>D</c>.</p>

            <sage><input>
            T = linear_transformation(Cspace, QQ^7, Dbasis)
            T
            </input></sage>

            <sage><input>
            T.is_invertible()
            </input></sage>

            <p>Now we simply <q>turn around</q> the definition, to make the inverse.</p>

            <sage><input>
            S = linear_transformation(Dspace, QQ^7, Cbasis)
            S
            </input></sage>

            <sage><input>
            S.is_invertible()
            </input></sage>

            <p>Composition with vector spaces using different bases does not seem to be working properly.  So we just check some random inputs to the composition.</p>

            <sage><input>
            comp = S*T
            comp.is_identity()
            </input></sage>

            <sage><input>
            v = random_vector(QQ, 7)
            v, T(S(v)) == v, S(T(v)) == v
            </input></sage>
        </section>

        <section>
            <title>Rank and Nullity</title>

            <p>A general (<ie /> not invertible) linear transformation from <m>\mathbb{Q}^6</m> to <m>\mathbb{Q}^5</m>.</p>

            <sage><input>
            F = matrix(QQ, [[1, 0, 2, -1, -4, 2], [-1, -1, -4, 3, 6, -5], [0, 1, 3, -2, -4, 5],
                [0, 4, 6, -8, -4, 8], [0, 1, 2, -2, -2, 3]])
            R = linear_transformation(QQ^6, QQ^5, F, side='right')
            R
            </input></sage>

            <p>Rank is dimension of range (image).  Note there are not left/right variants.</p>

            <sage><input>
            R.image()
            </input></sage>

            <sage><input>
            R.rank()
            </input></sage>

            <p>Nullity is dimension of kernel.  Note there are not left/right variants.</p>

            <sage><input>
            R.kernel()
            </input></sage>

            <sage><input>
            R.nullity()
            </input></sage>

            <p>Note that rank and nullity sum to the dimension of the domain (which is <m>6</m> here).</p>
        </section>

        <xi:include href="../legal.xml" />

    </article>
</mathbook>
