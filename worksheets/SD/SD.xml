<?xml version="1.0" encoding="UTF-8" ?>

<!--   Sage and Linear Algebra Worksheets    -->
<!--            Robert A. Beezer             -->
<!--  Copyright 2016-2021 License: CC BY-SA  -->
<!--  See COPYING for more information       -->

<pretext  xmlns:xi="http://www.w3.org/2001/XInclude">

    <xi:include href="../worksheetinfo.xml" />

    <article xml:id="SD">
        <title>Sage and Linear Algebra Worksheet</title>
        <subtitle>FCLA Section SD</subtitle>

        <!-- header inclusion needs -xinclude switch on xsltproc -->
        <frontmatter>
            <xi:include href="../header.xml" />
        </frontmatter>

        <section>
            <title>Similarity</title>

            <p>We manufacture two matrices that are similar, and use Sage to check.  A <q>unimodular</q> matrix is one with determinant 1.  A unimodular matrix with integer entries will have an inverse with integer entries (that is a theorem, and Exercise PDM.M20).</p>

            <sage><input>
            A = random_matrix(ZZ, 10, x = -9, y = 9).change_ring(QQ)
            S = random_matrix(QQ, 10, algorithm='unimodular', upper_bound=9)
            B = S.inverse()*A*S
            A, B
            </input></sage>

            <p>This next command might be broken, and might even just hang.  My fault.  It will be fixed, using rational canonical form, for Sage 7.6.  See <url href="https://trac.sagemath.org/ticket/18505">Trac ticket <hash />18505</url> for the details.</p>

            <sage><input>
            A.is_similar(B)
            </input></sage>
        </section>

        <section>
            <title>Diagonalization</title>

            <p>These two matrices are from the earlier demo for Section EE.  First is diagonalizable, second is not.  The easiest way to see the difference is with the <c>eigenmatrix</c> commands.</p>

            <exercise>
                <statement>
                    <p>Diagonalize the matrix <m>A</m>.</p>
                </statement>
            </exercise>

            <sage><input>
            A = matrix(QQ, [
                [-31, -23, -16,  12, 120, -17],
                [ -3,   7,   0, -12,  60, -21],
                [-28, -14,  -9,  -4, 152, -30],
                [-36, -20, -16,  -1, 192, -32],
                [ -9,  -5,  -4,   0,  47,  -8],
                [ -1,   1,   0,  -4,  20,  -3]
                ])
            A
            </input></sage>

            <p><c>S</c>, the matrix whose columns are eigenvectors, will <q>diagonalize</q> <c>A</c>.</p>

            <sage><input>
            D, S = A.eigenmatrix_right()
            D, S
            </input></sage>

            <sage><input>
            S.inverse()*A*S == D
            </input></sage>

            <p>Here is an equivalent formulation.</p>

            <sage><input>
            A*S == S*D
            </input></sage>

            <exercise>
                <statement>
                    <p>Now, in contrast, a matrix that is not diagonalizable.  Try to diagonalize the matrix <m>C</m>.</p>
                </statement>
            </exercise>

            <sage><input>
            C = matrix(QQ, [
                [128,   20,  44, -50,  236, -18, -330, -565],
                [ -23, -16,  -5,   6,  -40,  27,   62,  128],
                [ -44, -12, -15,  16,  -78,  20,  110,  207],
                [ -2,   10,  -4,   3,  -10, -23,   20,   -9],
                [ -61,   5, -25,  27, -116, -26,  153,  225],
                [ -12, -12,  -1,   2,  -20,  24,   34,   82],
                [ -23,  -3,  -8,   9,  -42,   2,   57,   99],
                [  13,   6,   3,  -4,   23, -12,  -35,  -72]
                ])
            C
            </input></sage>

            <sage><input>
            D, S = C.eigenmatrix_right()
            D, S
            </input></sage>

            <p>The zero columns in <c>S</c> tell us that at least one eigenvalue has a geometric multiplicity strictly less than the algebraic multiplicity of the eigenvalue.  So by Theorem DMFE the matrix <c>C</c> is not diagonalizable.</p>

            <p>A second consequence of the zero columns of <c>S</c> is that it will not be an invertible matrix.  But the output from Sage still obeys a fundamental relationship.</p>

            <sage><input>
            C*S == S*D
            </input></sage>

            <p>Perhaps simpler is the built-in function <c>.is_diagonalizable()</c>.</p>

            <sage><input>
            A.is_diagonalizable()
            </input></sage>

            <sage><input>
            C.is_diagonalizable()
            </input></sage>
        </section>

        <section>
            <title>Nearly Diagonalizable</title>

            <p>A matrix that is not diagonalizable will always be similar to a matrix that is <em>almost</em> diagonalizable.  The <q>nearly diagonal</q> matrix is called the <term>Jordan canonical form</term> of the matrix.</p>

            <exercise>
                <statement>
                    <p>While beyond the scope of this course, use Sage to compute the Jordan canonical form for the matrix <c>C</c>.  Notice the eigenvalues of <c>C</c> on the diagonal and the 1's on the <term>super-diagonal</term>.</p>

                    <p>Peculiarly, the similarity matrix need not be computed to get the form, and it is a significant computational expense.  So we ask for it explicitly.</p>
                </statement>
            </exercise>

            <sage><input>
            J, T = C.jordan_form(transformation=True)
            J, T
            </input></sage>

            <p>The transformation matrix, <c>T</c>, is invertible and will <q>almost diagonalize</q> <c>C</c>.</p>

            <sage><input>
            T.inverse()*C*T == J
            </input></sage>

            <exercise>
                <statement>
                    <p><term>Rational canonical form</term> is another interesting version of this idea, try <c>.rational_form()</c> on <c>C</c>.  And if you do, then execute the following two cells and see if the coefficients look familiar.  Learn more about <term>companion matrices</term> if this makes you curious.</p>
                </statement>
            </exercise>

            <sage><input>
            C.rational_form()
            </input></sage>

            <sage><input>
            C.fcp()
            </input></sage>

            <sage><input>
            ((x-1)^3*(x+2)^3).expand()
            </input></sage>
        </section>

        <xi:include href="../legal.xml" />

    </article>
</pretext>
