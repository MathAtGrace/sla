<?xml version="1.0" encoding="UTF-8" ?>

<!-- Sage and Linear Algebra Worksheets -->
<!--          Robert A. Beezer          -->
<!--  Copyright 2017 License: CC BY-SA  -->
<!--  See COPYING for more information  -->

<mathbook  xmlns:xi="http://www.w3.org/2001/XInclude">

    <article xml:id="CB">
        <title>Sage and Linear Algebra Worksheet</title>
        <subtitle>FCLA Section CB</subtitle>

        <!-- header inclusion needs -xinclude switch on xsltproc -->
        <frontmatter>
            <xi:include href="../header.xml" />
        </frontmatter>

        <section>
            <title>A Linear Transformation, Two Vector Spaces, Four Bases</title>

            <p>In this section we deﬁne a linear transformation from <m>\mathbb{C}^{3}</m> to <m>\mathbb{C}^{7}</m> using a randomly selected matrix. The deﬁnition is a <m>7\times 3</m> matrix of rank <m>3</m> that we will use to multiply input vectors with a matrix-vector product. It is not important if the linear transformation is injective and/or surjective.</p>

            <p>We will build two representations, using a total of four bases — two for the domain and two for the codomain.</p>

            <sage><input>
            m, n = 7, 3
            A = random_matrix(QQ, m, n, algorithm='echelonizable', rank=n, upper_bound=9)
            A
            </input></sage>

            <sage><input>
            T = linear_transformation(A, side='right')
            T
            </input></sage>

            <p>The four bases, associated with the two vector spaces.</p>

            <sage><input>
            D1mat = random_matrix(QQ, n, n, algorithm='unimodular', upper_bound=9)
            D1 = D1mat.columns()
            D1
            VD1 = (QQ^n).subspace_with_basis(D1)
            #
            D2mat = random_matrix(QQ, n, n, algorithm='unimodular', upper_bound=9)
            D2 = D2mat.columns()
            D2
            VD2 = (QQ^n).subspace_with_basis(D2)
            #
            C1mat = random_matrix(QQ, m, m, algorithm='unimodular', upper_bound=9)
            C1 = C1mat.columns()
            C1
            VC1 = (QQ^m).subspace_with_basis(C1)
            #
            C2mat = random_matrix(QQ, m, m, algorithm='unimodular', upper_bound=9)
            C2 = C2mat.columns()
            C2
            VC2 = (QQ^m).subspace_with_basis(C2)
            </input></sage>

            <exercise>
                <statement>
                    <p>Check out a few of these bases by just asking Sage to display them.</p>
                </statement>
            </exercise>

            <sage><input>
            D1
            </input></sage>

            <p>Now we build two <em>different</em> representations.</p>

            <sage><input>
            rep1 = T.restrict_domain(VD1).restrict_codomain(VC1)
            rep1.matrix(side='right')
            </input></sage>

            <sage><input>
            rep2 = T.restrict_domain(VD2).restrict_codomain(VC2)
            rep2.matrix(side='right')
            </input></sage>

        </section>

        <section>
            <title>Change of Basis Matrices</title>

            <p>A natural way to build a change-of-basis matrix in Sage is to adjust the bases for domain and range of the identity linear transformation by supplying an identity matrix to the linear tansformation constructor.</p>

            <sage><input>
            identity_domain = linear_transformation(QQ^n, QQ^n, identity_matrix(n))
            identity_domain
            </input></sage>

            <sage><input>
            CBdom = identity_domain.restrict_domain(VD1).restrict_codomain(VD2)
            CBdom_mat = CBdom.matrix(side='right')
            CBdom_mat
            </input></sage>

            <p>This matrix should convert between the two bases for the domain.  Here's a check of Theorem CB.</p>

            <sage><input>
            u = random_vector(QQ, n)
            u1 = VD1.coordinate_vector(u)
            u2 = VD2.coordinate_vector(u)
            u, u1, u2, u2 == CBdom_mat*u1
            </input></sage>

            <p>Same drill in the codomain.</p>

            <sage><input>
            identity_codomain = linear_transformation(QQ^m, QQ^m, identity_matrix(m))
            identity_codomain
            </input></sage>

            <sage><input>
            CBcodom = identity_codomain.restrict_domain(VC1).restrict_codomain(VC2)
            CBcodom_mat = CBcodom.matrix(side='right')
            CBcodom_mat
            </input></sage>

            <p>And here is the check on Theorem MRCB.  Convert from domain basis 1 to domain basis 2, use the second representation, then convert back from codomain basis 2 to codomain basis 1 and get as a result the representation relative to the first bases.</p>

            <sage><input>
            rep1.matrix(side='right') == CBcodom_mat.inverse()*rep2.matrix(side='right')*CBdom_mat
            </input></sage>

        </section>

        <section>
            <title>A Diagonal Representation</title>

            <p>We specialize to linear transformations with equal domain and codomain.</p>

            <p>First a matrix representation using a square matrix.</p>

            <sage><input>
            A = matrix(QQ,
            [[ -2,   3, -20,  15,   1,  30,  -5,   17],
             [-27, -38, -30, -50, 268, -73, 210, -273],
             [-12, -24,  -7, -30, 142, -48, 100, -160],
             [ -3, -15,  35, -32,  35, -57,  20,  -71],
             [ -9,  -9, -10, -10,  65, -11,  50,  -59],
             [ -3,  -6, -20,   0,  58,   1,  40,  -55],
             [  3,   0,   5,   0, -10,  -3, -12,    1],
             [  0,   3,   0,   5, -19,  10, -15,   25]])
            T = linear_transformation(A, side='right')
            T
            </input></sage>

            <p>A basis of <m>\mathbb{C}^8</m>. And a vector space with this basis.</p>

            <sage><input>
            v1 = vector(QQ, [-4,  -6, -1,  7, -2, -4, 1, 0])
            v2 = vector(QQ, [ 3, -10, -6, -6, -2,  0, 0, 1])
            v3 = vector(QQ, [ 0,  -9, -4, -1, -3, -1, 1, 0])
            v4 = vector(QQ, [ 1, -12, -8, -5, -3, -2, 0, 1])
            v5 = vector(QQ, [ 0,   3,  2,  2,  1,  0, 0, 0])
            v6 = vector(QQ, [ 1,   0,  0, -2,  0,  1, 0, 0])
            v7 = vector(QQ, [ 0,   0,  2,  3,  0,  0, 1, 0])
            v8 = vector(QQ, [ 3,  -4, -2, -3,  0,  0, 0, 1])
            B = [v1, v2, v3, v4, v5, v6, v7, v8]
            V = (QQ^8).subspace_with_basis(B)
            </input></sage>

            <sage><input>
            S = T.restrict_domain(V).restrict_codomain(V)
            S.matrix(side='right')
            </input></sage>

            <p>That's a nice representation!  Where did the basis come from?</p>

            <sage><input>
            A.eigenvalues()
            </input></sage>

            <p>Some (right) eigenvectors.</p>

            <sage><input>
            (A - 3).right_kernel(basis='pivot').basis()
            </input></sage>

            <p>Eigenvalues are a property of the linear transformation.</p>

            <sage><input>
            T.eigenvalues()
            </input></sage>

            <p>Bases for the eigenspaces depend on the representation, but the actual eigenvectors are also a property of the linear transformation.</p>

            <sage><input>
            S.eigenvectors()
            </input></sage>

            <sage><input>
            T.eigenvectors()
            </input></sage>

            <p>We could do the same thing, but in the style of Section SD, using a change-of-basis matrix.</p>

            <sage><input>
            identity = linear_transformation(QQ^8, QQ^8, identity_matrix(8))
            identity
            </input></sage>

            <sage><input>
            CB = identity.restrict_domain(V).restrict_codomain(QQ^8)
            CB
            </input></sage>

            <p>Here is similarity, in disguise.</p>

            <sage><input>
            CBmat = CB.matrix(side='right')
            CBmat.inverse()*T.matrix(side='right')*CBmat
            </input></sage>
        </section>
    </article>
</mathbook>
